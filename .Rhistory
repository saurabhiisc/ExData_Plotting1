?inverse
?solve
?mean
clearPushBack()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(m))
{
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)...
x$setinv(inv)inv
inv
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(m))
{
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)...
x$setinv(inv)
inv
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(m))
{
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
x <- matrix(1:4, nrow=2, ncol=2)
## m <- makeCacheMatrix(x)
## s <- cacheSolve(m)
m <- makeCacheMatrix(x)
m
x
makeCacheMatrix(x)
m <- makeCacheMatrix(x)
s <- cacheSolve(m)
s
m
s
x
s <- cacheSolve(m)
m
m$get()
m$getinv()
inv <-  solve(m$get())
inv
x$setinv(inv)
x$setinv(inv)
inv
x$setinv(inv)
inverse
inv
x$setinv(inv)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv))
{
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv))
{
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
## x <- matrix(1:4, nrow=2, ncol=2)
## m <- makeCacheMatrix(x)
## s <- cacheSolve(m)
x <- matrix(1:4, nrow=2, ncol=2)
## m <- makeCacheMatrix(x)
## s <- cacheSolve(m)
x
x <- matrix(1:4, nrow=2, ncol=2)
m <- makeCacheMatrix(x)
## s <- cacheSolve(m)
m
m$get()
m$getinv
m$getinv(0)
m$getinv()
s <- cacheSolve(m)
s
m$getinv()
m$getinv()
s <- cacheSolve(m)
s
file <- "http://d396qusza40orc.cloudfront.net/getdata/data/restaurants.xml"
my.doc <- xmlTreeParse(file=file,useInternal=TRUE)
root.Node <- xmlRoot(my.doc)
xmlName(root.Node)
file1 <- split(file, file$State)rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with the given rank
## 30-day death rate
file <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
allowed_outcomes <- c("heart attack", "heart failure", "pneumonia")
real_states <- unique(file$State)
if(!(state %in% real_states))
stop("invalid state")
if(!(outcome %in% allowed_outcomes))
stop("invalid outcome")
column <- c(11,17,23)
x <- data.frame(column, allowed_outcomes)
file <- subset(file, State == state, select = c(2,x[x$allowed_outcomes == outcome, 1]))
file[, 2] <- as.numeric(file[, 2])
colnames(file) <- c("Hospital", "Disease.Death")
file <- file[!is.na(file$Disease.Death), ]
if(num == "best")
num <- 1
if(num == "worst")
num = nrow(file)
file <- file[order(file$Disease.Death, file$Hospital), ]
file[num, 1]
}
library(XML)
file <- "http://d396qusza40orc.cloudfront.net/getdata/data/restaurants.xml"
my.doc <- xmlTreeParse(file=file,useInternal=TRUE)
root.Node <- xmlRoot(my.doc)
xmlName(root.Node)
xmlName(root.Node)
xmlSApply(root.Node, "//zipcode", xmlValue)
zipcode <- xpathSApply(root.Node, "//zipcode", xmlValue)
zipcode
length(zipcode == 21231)
class(zipcode)
length(zipcode == "21231")
length(zipcode[zipcode == 21231])
length(zipcode[zipcode == "21231"])
library(data.table)
file <- fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", "data3.cdv")
file <- fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", "data3.csv")
?frad
?fread
DT <- fread(input="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", sep=",")
str(DT)
str(DT$SEX)
DT[DT$SEX == 1]
nrow(DT[DT$SEX == 1])
nrow(DT[DT$SEX == 2])
nrow(DT)
str(DT$SEX)
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15)
)
system.time(mean(DT[DT$SEX==2,]$pwgtp15)
)
system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==2,]$pwgtp15))
mean(DT$pwgtp15,by=DT$SEX)
a <- mean(DT$pwgtp15,by=DT$SEX)
a
str(DT$SEX)
a <- mean(DT$pwgtp15,by=DT$SEX)
a
a
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15, DT$SEX, mean))
system.time(tapply(DT$pwgtp15, DT$SEX, mean))
tapply(DT$pwgtp15, DT$SEX, mean)
mean(DT$pwgtp15,by=DT$SEX)
mean(DT$pwgtp15, by=DT$SEX)
mean(DT$pwgtp15, by=SEX)
split(DT$pwgtp15, DT$SEX)
sapply(split(DT$pwgtp15, DT$SEX), mean)
DT[, mean(pwgtp15), by=SEX]
DT[DT$SEX==1]
rowDT[DT$SEX==1]
rowMeans(DT[DT$SEX==1])
rowMeans(DT)[DT$SEX==1]
rowMeans(DT)[DT$SEX==1]
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
DT[, mean(pwgtp15), by=SEX]
DT
DT <- fread(input="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", sep=",")
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
class(DT)
?rowMeans
x <- matrix(1:20, 4, 5)
x
rowMeans(x)
rowMeans(DT[DT$SEX==1])
rowMeans(DT[DT$SEX=="1"])
install.packages("RMySQL")
library(RMySQL)
R.home()
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
library(RMySQL)
icsDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
ucsDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
result
head(result)
dbDisconnect(ucsDb);
dbDisconnect(icsDb);
dbDisconnect(idcsDb);
hg19 <- dbConnect(MySQL(),user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
hg19 <- dbConnect(MySQL(),user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
lkk
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "852400aabe96751f2193",
secret = "89470ec873876e17c8cf74db1ae7127399a15e2d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
source("read_and_filter_data.R")
pow <- read_and_filter_data()
# Plot1
par(mfrow = c(1,1))
hist(pow$Global_active_power, col = "red", xlab ="Global Active Power (kilowatts)", main = "Global Active Power")
dev.copy(png, "ExData_Plotting1/figure/plot1.png", width=480, height=480)
dev.off()
setwd("C:/Users/Lenovo/Documents/R/datasciencecoursera1/assignment5/")
source("read_and_filter_data.R")
setwd("C:/Users/Lenovo/Documents/R/datasciencecoursera1/assignment5/ExData_Plotting1/")
source("read_and_filter_data.R")
pow <- read_and_filter_data()
par(mfrow = c(1,1))
hist(pow$Global_active_power, col = "red", xlab ="Global Active Power (kilowatts)", main = "Global Active Power")
dev.copy(png, "ExData_Plotting1/figure/plot1.png", width=480, height=480)
dev.off()
setwd("C:/Users/Lenovo/Documents/R/datasciencecoursera1/assignment5/ExData_Plotting1/")
source("read_and_filter_data.R")
pow <- read_and_filter_data()
# Plot2
par(mfrow = c(1,1))
plot(pow$date_time, pow$Global_active_power, type = "l", xlab = "", ylab="Global Active Power (kilowatts)")
dev.copy(png, "ExData_Plotting1/figure/plot2.png", width=480, height=480)
dev.off()
setwd("C:/Users/Lenovo/Documents/R/datasciencecoursera1/assignment5/ExData_Plotting1/")
source("read_and_filter_data.R")
pow <- read_and_filter_data()
# Plot3
par(mfrow = c(1,1))
plot(pow$date_time, pow$Sub_metering_1, type = "l", xlab="", ylab="Energy sub metering")
lines(pow$date_time, pow$Sub_metering_2, col = "red", type = "l")
lines(pow$date_time, pow$Sub_metering_3, col = "blue", type = "l")
legend("topright", col = c("black", "red", "blue"), legend =c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd = 1, bty = "n")
dev.copy(png, "ExData_Plotting1/figure/plot3.png", width=480, height=480)
dev.off()
setwd("C:/Users/Lenovo/Documents/R/datasciencecoursera1/assignment5/ExData_Plotting1/")
source("read_and_filter_data.R")
pow <- read_and_filter_data()
# Plot4
par(mfrow = c(2,2))
plot(pow$date_time, pow$Global_active_power, ylab = "Global Active Power", type = "l")
plot(pow$date_time, pow$Voltage, xlab = "datetime", ylab ="Volatge", type = "l")
plot(pow$date_time, pow$Sub_metering_1, type = "l", xlab="", ylab="Energy sub metering")
lines(pow$date_time, pow$Sub_metering_2, col = "red", type = "l")
lines(pow$date_time, pow$Sub_metering_3, col = "blue", type = "l")
legend("topright", col = c("black", "red", "blue"), legend =c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd = 1, bty = "n")
plot(pow$date_time, pow$Global_reactive_power, xlab = "datetime", ylab = "Global_reactive_power", type ="l")
dev.copy(png, "ExData_Plotting1/figure/plot4.png", width=480, height=480)
dev.off()
par(mfrow = c(2,2))
plot(pow$date_time, pow$Global_active_power, ylab = "Global Active Power", type = "l")
plot(pow$date_time, pow$Voltage, xlab = "datetime", ylab ="Volatge", type = "l")
plot(pow$date_time, pow$Sub_metering_1, type = "l", xlab="", ylab="Energy sub metering")
lines(pow$date_time, pow$Sub_metering_2, col = "red", type = "l")
lines(pow$date_time, pow$Sub_metering_3, col = "blue", type = "l")
legend("topright", col = c("black", "red", "blue"), legend =c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, bty = "n")
plot(pow$date_time, pow$Global_reactive_power, xlab = "datetime", ylab = "Global_reactive_power", type ="l")
dev.copy(png, "ExData_Plotting1/figure/plot4.png", width=480, height=480)
dev.off()
setwd("C:/Users/Lenovo/Documents/R/datasciencecoursera1/assignment5/ExData_Plotting1/")
par(mfrow = c(2,2))
plot(pow$date_time, pow$Global_active_power, ylab = "Global Active Power", type = "l")
plot(pow$date_time, pow$Voltage, xlab = "datetime", ylab ="Volatge", type = "l")
plot(pow$date_time, pow$Sub_metering_1, type = "l", xlab="", ylab="Energy sub metering")
lines(pow$date_time, pow$Sub_metering_2, col = "red", type = "l")
lines(pow$date_time, pow$Sub_metering_3, col = "blue", type = "l")
legend("topright", col = c("black", "red", "blue"), legend =c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, bty = "n")
plot(pow$date_time, pow$Global_reactive_power, xlab = "datetime", ylab = "Global_reactive_power", type ="l")
dev.copy(png, "ExData_Plotting1/figure/plot4.png", width=480, height=480)
dev.off()
par(mfrow = c(2,2))
plot(pow$date_time, pow$Global_active_power, ylab = "Global Active Power", type = "l")
plot(pow$date_time, pow$Voltage, xlab = "datetime", ylab ="Volatge", type = "l")
plot(pow$date_time, pow$Sub_metering_1, type = "l", xlab="", ylab="Energy sub metering")
lines(pow$date_time, pow$Sub_metering_2, col = "red", type = "l")
lines(pow$date_time, pow$Sub_metering_3, col = "blue", type = "l")
legend("topright", col = c("black", "red", "blue"), legend =c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, bty = "n")
plot(pow$date_time, pow$Global_reactive_power, xlab = "datetime", ylab = "Global_reactive_power", type ="l")
par(mfrow = c(2,2))
plot(pow$date_time, pow$Global_active_power, ylab = "Global Active Power", type = "l")
plot(pow$date_time, pow$Voltage, xlab = "datetime", ylab ="Volatge", type = "l")
plot(pow$date_time, pow$Sub_metering_1, type = "l", xlab="", ylab="Energy sub metering")
lines(pow$date_time, pow$Sub_metering_2, col = "red", type = "l")
lines(pow$date_time, pow$Sub_metering_3, col = "blue", type = "l")
legend("topright", col = c("black", "red", "blue"), legend =c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=c(1,1,1), bty = "n")
plot(pow$date_time, pow$Global_reactive_power, xlab = "datetime", ylab = "Global_reactive_power", type ="l")
dev.copy(png, "ExData_Plotting1/figure/plot4.png", width=480, height=480)
dev.off()
par(mfrow = c(2,2))
plot(pow$date_time, pow$Global_active_power, ylab = "Global Active Power", type = "l")
plot(pow$date_time, pow$Voltage, xlab = "datetime", ylab ="Volatge", type = "l")
plot(pow$date_time, pow$Sub_metering_1, type = "l", xlab="", ylab="Energy sub metering")
lines(pow$date_time, pow$Sub_metering_2, col = "red", type = "l")
lines(pow$date_time, pow$Sub_metering_3, col = "blue", type = "l")
legend("topright", col = c("black", "red", "blue"), legend =c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=c(1,1,1), bty = "n")
plot(pow$date_time, pow$Global_reactive_power, xlab = "datetime", ylab = "Global_reactive_power", type ="l")
dev.copy(png, "ExData_Plotting1/figure/plot5.png", width=480, height=480)
dev.off()
par(mfrow = c(2,2))
plot(pow$date_time, pow$Global_active_power, ylab = "Global Active Power", type = "l")
plot(pow$date_time, pow$Voltage, xlab = "datetime", ylab ="Volatge", type = "l")
plot(pow$date_time, pow$Sub_metering_1, type = "l", xlab="", ylab="Energy sub metering")
lines(pow$date_time, pow$Sub_metering_2, col = "red", type = "l")
lines(pow$date_time, pow$Sub_metering_3, col = "blue", type = "l")
legend("topright", col = c("black", "red", "blue"), legend =c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=c(1,1,1), bty = "n")
plot(pow$date_time, pow$Global_reactive_power, xlab = "datetime", ylab = "Global_reactive_power", type ="l")
dim(pow)
par(mfrow = c(1,1))
plot(pow$date_time, pow$Sub_metering_1, type = "l", xlab="", ylab="Energy sub metering")
lines(pow$date_time, pow$Sub_metering_2, col = "red", type = "l")
lines(pow$date_time, pow$Sub_metering_3, col = "blue", type = "l")
legend("topright", col = c("black", "red", "blue"), legend =c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd = 1, bty = "n")
dev.copy(png, "ExData_Plotting1/figure/plot3.png", width=480, height=480)
dev.off()
